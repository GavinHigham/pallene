#!/usr/bin/env lua

local argparse = require "argparse"

local driver = require "pallene.driver"
local util = require "pallene.util"

local p = argparse("pallenec", "Pallene compiler")
p:argument("source_file", "File to compile")
p:flag("--emit-c", "Generate a .c file instead of an .so file")
p:flag("--emit-asm", "Generate a .s file instead of an .so file")
p:flag("--compile-c", "Compile a .c file generated by --emit-c")
local args = p:parse()

-- For compilation errors that don't happen inside a source file.
-- Inspired by gcc, eg. "gcc: fatal error: no input files".
local compiler_name = arg[0]

local function pallenec_abort(fmt, ...)
    return util.abort(compiler_name .. ":" .. string.format(fmt, ...))
end

local function compile(in_ext, out_ext)
    local ok, errs = driver.compile(
        compiler_name, in_ext, out_ext, args.source_file)
    if not ok then
        util.abort(table.concat(errs, "\n"))
    end
end

local flags = {}
if args.emit_c    then table.insert(flags, "--emit-c") end
if args.emit_asm  then table.insert(flags, "--emit-asm") end
if args.compile_c then table.insert(flags, "--compile-c") end

if #flags >= 2 then
    local conflicting = table.concat(flags, " and ")
    pallenec_abort("flags %s are mutually exclusive", conflicting)
end

if     #flags == 0    then compile("pln", "so")
elseif args.emit_c    then compile("pln", "c")
elseif args.emit_asm  then compile("c",   "s")
elseif args.compile_c then compile("c" ,  "so")
else
    error("impossible")
end
